{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwallace/cymatics/ronin-react/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport CourseContainer from './CourseContainer';\nimport LogInRegisterForm from './LogInRegisterForm';\nimport EnrollmentContainer from './EnrollmentContainer';\nimport UserContainer from './UserContainer';\nimport Header from './Header';\nexport default class App extends Component {\n  constructor() {\n    console.log('THIS IS PROCESS ENV');\n    console.log(process.env);\n    super();\n\n    this.getEnrollments = async () => {\n      try {\n        const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + this.state.loggedInUserId;\n        const enrollmentsResponse = await fetch(url, {\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const enrollmentsJson = await enrollmentsResponse.json();\n        console.log('this is enrollmentsJson', enrollmentsJson);\n        console.log('this is enrollmentsResponse', enrollmentsResponse);\n        this.setState({\n          enrollments: enrollmentsJson.data\n        });\n      } catch (error) {\n        console.log('Error getting enrollments data');\n        console.error(error);\n      }\n    };\n\n    this.createEnrollment = async enrollmentToAdd => {\n      console.log('Props from APP');\n      console.log('HERE IS THE COURSE ID IN ENROLLMENTS');\n      console.log(enrollmentToAdd);\n\n      try {\n        const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + enrollmentToAdd + '/' + this.props.loggedInUserId;\n        const createdEnrollmentResponse = await fetch(url, {\n          method: 'POST',\n          credentials: 'include',\n          body: JSON.stringify(enrollmentToAdd),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n        const createdEnrollmentJson = await createdEnrollmentResponse.json();\n        console.log(\"here is what we get when we try to enroll in a course\");\n        console.log(createdEnrollmentJson);\n\n        if (createdEnrollmentResponse.status === 201) {\n          this.setState({\n            enrollments: [...this.state.enrollments, createdEnrollmentJson.data]\n          });\n        }\n\n        console.log('HERE IS THE STATE OF ENROLLMENTS IN APP.JS');\n        console.log(this.state.enrollments);\n      } catch (error) {\n        console.error('error enrolling in course');\n        console.error(error);\n      }\n    };\n\n    this.register = async registerInfo => {\n      console.log(\"register() in app. js called with the following info\", registerInfo);\n      const url = process.env.REACT_APP_API_URL + \"/api/v1/users/register\";\n\n      try {\n        const registerResponse = await fetch(url, {\n          credentials: 'include',\n          method: 'POST',\n          body: JSON.stringify(registerInfo),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('registerResponse', registerResponse);\n        const registerJson = await registerResponse.json();\n        console.log(\"registerJson\", registerJson);\n\n        if (registerResponse.status === 201) {\n          this.setState({\n            loggedIn: true,\n            loggedInUserEmail: registerJson.data.email,\n            loggedInUserId: registerJson.data.id,\n            loggedInUserAdmin: registerJson.data.is_admin\n          });\n        }\n      } catch (error) {\n        console.error('Error trying to register with API');\n        console.error(error);\n      }\n    };\n\n    this.login = async loginInfo => {\n      const url = process.env.REACT_APP_API_URL + '/api/v1/users/login';\n\n      try {\n        const loginResponse = await fetch(url, {\n          credentials: 'include',\n          method: 'POST',\n          body: JSON.stringify(loginInfo),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('loginResponse', loginResponse);\n        const loginJson = await loginResponse.json();\n        console.log('loginJson', loginJson);\n        console.log(loginJson.data);\n\n        if (loginResponse.status === 200) {\n          this.setState({\n            loggedIn: true,\n            loggedInUserEmail: loginJson.data.email,\n            loggedInUserId: loginJson.data.id,\n            loggedInUserIsAdmin: loginJson.data.is_admin\n          });\n        }\n\n        console.log(\"here is what is currently in state\");\n        console.log(this.state);\n      } catch (error) {\n        console.error('Error trying to log in');\n        console.error(error);\n      }\n    };\n\n    this.logout = async () => {\n      try {\n        const url = process.env.REACT_APP_API_URL + '/api/v1/users/logout';\n        const logoutResponse = await fetch(url, {\n          credentials: 'include'\n        });\n        console.log('logoutResponse', logoutResponse);\n        const logoutJson = await logoutResponse.json();\n        console.log(logoutJson, 'logoutJson');\n\n        if (logoutResponse.status === 200) {\n          this.setState({\n            loggedIn: false,\n            loggedInUserEmail: '',\n            loggedInUserId: '',\n            loggedInUserIsAdmin: false\n          });\n        }\n      } catch (error) {\n        console.error('error logging out');\n        console.error(error);\n      }\n    };\n\n    this.state = {\n      loggedIn: false,\n      loggedInUserEmail: \"\",\n      loggedInUserId: \"\",\n      loggedInUserIsAdmin: null,\n      enrollments: []\n    };\n  }\n\n  componentDidMount() {\n    this.getEnrollments();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 4\n      }\n    }, this.state.loggedIn ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      logout: this.logout,\n      email: this.state.loggedInUserEmail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(UserContainer, {\n      state: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(EnrollmentContainer, {\n      enrollments: this.state.enrollments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CourseContainer, {\n      createEnrollment: this.createEnrollment,\n      userInfo: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }), \"}\") : /*#__PURE__*/React.createElement(LogInRegisterForm, {\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/matthewwallace/cymatics/ronin-react/src/App.js"],"names":["React","Component","CourseContainer","LogInRegisterForm","EnrollmentContainer","UserContainer","Header","App","constructor","console","log","process","env","getEnrollments","url","REACT_APP_API_URL","state","loggedInUserId","enrollmentsResponse","fetch","credentials","headers","enrollmentsJson","json","setState","enrollments","data","error","createEnrollment","enrollmentToAdd","props","createdEnrollmentResponse","method","body","JSON","stringify","createdEnrollmentJson","status","register","registerInfo","registerResponse","registerJson","loggedIn","loggedInUserEmail","email","id","loggedInUserAdmin","is_admin","login","loginInfo","loginResponse","loginJson","loggedInUserIsAdmin","logout","logoutResponse","logoutJson","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\nimport CourseContainer from './CourseContainer'\nimport LogInRegisterForm from './LogInRegisterForm'\nimport EnrollmentContainer from './EnrollmentContainer'\nimport UserContainer from './UserContainer'\nimport Header from './Header'\n\n\nexport default class App extends Component {\n  \n  constructor() {\n    console.log('THIS IS PROCESS ENV');\n    console.log(process.env);\n    super()\n\n    this.state = {\n      loggedIn: false, \n      loggedInUserEmail: \"\",\n      loggedInUserId: \"\",\n      loggedInUserIsAdmin: null,\n      enrollments:[],\n    }\n  }\n\n  componentDidMount() {\n    this.getEnrollments()\n  }\n  \n  getEnrollments = async () => {\n    try {\n      const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + this.state.loggedInUserId\n      const enrollmentsResponse = await fetch(url, {\n        credentials:'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      const enrollmentsJson = await enrollmentsResponse.json()\n      console.log('this is enrollmentsJson', enrollmentsJson);\n      console.log('this is enrollmentsResponse', enrollmentsResponse);\n      this.setState({\n        enrollments: enrollmentsJson.data\n      })\n    } catch (error) {\n      console.log('Error getting enrollments data');\n      console.error(error)\n    }\n  }\n\n  createEnrollment = async (enrollmentToAdd) => {\n    console.log('Props from APP');\n    console.log('HERE IS THE COURSE ID IN ENROLLMENTS');\n    console.log(enrollmentToAdd);\n    try {\n      const url = process.env.REACT_APP_API_URL  + \"/api/v1/enrollments/\" + enrollmentToAdd + '/' + this.props.loggedInUserId\n      const createdEnrollmentResponse = await fetch(url, {\n        method: 'POST',\n        credentials:'include',\n        body: JSON.stringify(enrollmentToAdd),\n        headers: {\n          'Content-Type':'application/json'\n        }\n      })\n      console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n      const createdEnrollmentJson = await createdEnrollmentResponse.json()\n      console.log(\"here is what we get when we try to enroll in a course\");\n      console.log(createdEnrollmentJson);\n      if (createdEnrollmentResponse.status === 201 ) {\n        this.setState({\n          enrollments:[...this.state.enrollments, createdEnrollmentJson.data]\n        })\n      }\n      console.log('HERE IS THE STATE OF ENROLLMENTS IN APP.JS');\n      console.log(this.state.enrollments)\n    } catch (error) {\n      console.error('error enrolling in course');\n      console.error(error)\n    }\n\n  }\n  \n  register = async (registerInfo) => {\n    console.log(\"register() in app. js called with the following info\", registerInfo);\n    const url = process.env.REACT_APP_API_URL + \"/api/v1/users/register\"\n    try {\n      const registerResponse = await fetch(url, {\n        credentials: 'include',\n        method: 'POST',\n        body: JSON.stringify(registerInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n\n      console.log('registerResponse', registerResponse);\n      const registerJson = await registerResponse.json()\n      console.log(\"registerJson\", registerJson);\n      if(registerResponse.status === 201) {\n        this.setState({\n          loggedIn: true,\n          loggedInUserEmail: registerJson.data.email,\n          loggedInUserId: registerJson.data.id,\n          loggedInUserAdmin: registerJson.data.is_admin\n        })\n      }\n    } catch (error) {\n      console.error('Error trying to register with API');\n      console.error(error)\n    }\n  }\n\n  login = async (loginInfo) => {\n    const url = process.env.REACT_APP_API_URL + '/api/v1/users/login'\n    try {\n      const loginResponse = await fetch(url, {\n        credentials:'include',\n        method: 'POST',\n        body:JSON.stringify(loginInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      console.log('loginResponse', loginResponse);\n      const loginJson = await loginResponse.json()\n      console.log('loginJson', loginJson);\n      console.log(loginJson.data);\n       if(loginResponse.status === 200) {\n        this.setState({\n          loggedIn: true,\n          loggedInUserEmail: loginJson.data.email,\n          loggedInUserId: loginJson.data.id,\n          loggedInUserIsAdmin:loginJson.data.is_admin\n\n        })\n      }\n      console.log(\"here is what is currently in state\");\n      console.log(this.state);\n    } catch(error) {\n      console.error('Error trying to log in')\n      console.error(error)\n    }\n  }\n\n  logout = async () => {\n    try {\n      const url = process.env.REACT_APP_API_URL  + '/api/v1/users/logout'\n      const logoutResponse = await fetch(url, {\n        credentials:'include'\n      })\n      console.log('logoutResponse', logoutResponse);\n      const logoutJson = await logoutResponse.json()\n      console.log(logoutJson, 'logoutJson');\n      if( logoutResponse.status === 200 ) {\n        this.setState({\n          loggedIn:false,\n          loggedInUserEmail:'',\n          loggedInUserId:'',\n          loggedInUserIsAdmin: false,\n        })\n      }\n    } catch (error) {\n      console.error('error logging out');\n      console.error(error)\n    }\n    \n  }\n\n  render () {\n  return (\n   <div className=\"App\">\n     {\n      this.state.loggedIn\n      ?\n      <React.Fragment>\n      <Header \n        logout={this.logout} \n        email={this.state.loggedInUserEmail} />\n        <UserContainer state={this.state}/>\n\n        <EnrollmentContainer \n          enrollments={this.state.enrollments}/>\n        <CourseContainer \n          createEnrollment={this.createEnrollment}\n          userInfo={this.state} />\n\n      }\n\n      </React.Fragment>\n      :\n      <LogInRegisterForm \n        login={this.login}\n        register={this.register}\n      />\n    }\n\n  </div>\n  );\n}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}