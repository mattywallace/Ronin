{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwallace/cymatics/ronin-react/src/EnrollmentContainer/index.js\";\nimport React, { Component } from 'react';\nimport EnrollmentList from '../EnrollmentList';\nexport default class EnrollmentContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getEnrollments = async () => {\n      try {\n        const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\";\n        const enrollmentsResponse = await fetch(url, {\n          credentials: 'include',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const enrollmentsJson = await enrollmentsResponse.json();\n        console.log('this is enrollmentsJson', enrollmentsJson);\n        console.log('this is enrollmentsResponse', enrollmentsResponse);\n        this.setState({\n          enrollments: enrollmentsJson.data\n        });\n      } catch (error) {\n        console.log('Error getting enrollments data');\n        console.error(error);\n      }\n    };\n\n    this.createEnrollment = async courseId => {\n      console.log('Props from APP');\n      console.log('HERE IS THE COURSE ID IN ENROLLMENTS');\n      console.log(courseId);\n\n      try {\n        const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + courseId + '/' + this.state.loggedInUserId;\n        const createdEnrollmentResponse = await fetch(url, {\n          method: 'POST',\n          credentials: 'include',\n          body: JSON.stringify(courseId),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n        const createdEnrollmentJson = await createdEnrollmentResponse.json();\n        console.log(\"here is what we get when we try to enroll in a course\");\n        console.log(createdEnrollmentJson);\n\n        if (createdEnrollmentResponse.status === 201) {\n          this.setState({\n            enrollments: [...this.state.enrollments, createdEnrollmentJson.data]\n          });\n        }\n\n        console.log('HERE IS THE STATE OF ENROLLMENTS IN APP.JS');\n        console.log(this.state.enrollments);\n      } catch (error) {\n        console.error('error enrolling in course');\n        console.error(error);\n      }\n    };\n\n    this.deleteEnrollment = async idOfEnrollmentToDelete => {\n      console.log('delete enrollment');\n      const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + idOfEnrollmentToDelete;\n\n      try {\n        const deleteEnrollmentResponse = await fetch(url, {\n          credentials: \"include\",\n          method: \"DELETE\"\n        });\n        console.log(\"deleteEnrollmentResponse\", deleteEnrollmentResponse);\n        const deleteEnrollmentJson = await deleteEnrollmentResponse.json();\n        console.log(\"deleteEnrollmentJson\", deleteEnrollmentJson);\n\n        if (deleteEnrollmentResponse.status === 200) {\n          this.setState({\n            courses: this.props.enrollments.filter(enrollment => enrollment.id !== idOfEnrollmentToDelete)\n          });\n        }\n      } catch (error) {\n        console.error('Error deleting enrollment');\n        console.error(error);\n      }\n    };\n\n    this.state = {\n      enrollments: []\n    };\n  }\n\n  componentDidMount() {\n    this.getEnrollments();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(EnrollmentList, {\n      deleteEnrollment: this.deleteEnrollment,\n      enrollments: this.props.enrollments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/matthewwallace/cymatics/ronin-react/src/EnrollmentContainer/index.js"],"names":["React","Component","EnrollmentList","EnrollmentContainer","constructor","props","getEnrollments","url","process","env","REACT_APP_API_URL","enrollmentsResponse","fetch","credentials","headers","enrollmentsJson","json","console","log","setState","enrollments","data","error","createEnrollment","courseId","state","loggedInUserId","createdEnrollmentResponse","method","body","JSON","stringify","createdEnrollmentJson","status","deleteEnrollment","idOfEnrollmentToDelete","deleteEnrollmentResponse","deleteEnrollmentJson","courses","filter","enrollment","id","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport EnrollmentList from '../EnrollmentList'\n\n\nexport default class EnrollmentContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tenrollments:[]\n\t\t}\n\t\t\n\t}\n\t  componentDidMount() {\n    this.getEnrollments()\n  }\n\n  getEnrollments = async () => {\n    try {\n      const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\"\n      const enrollmentsResponse = await fetch(url, {\n        credentials:'include',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      const enrollmentsJson = await enrollmentsResponse.json()\n      console.log('this is enrollmentsJson', enrollmentsJson);\n      console.log('this is enrollmentsResponse', enrollmentsResponse);\n      this.setState({\n        enrollments: enrollmentsJson.data\n      })\n    } catch (error) {\n      console.log('Error getting enrollments data');\n      console.error(error)\n    }\n  }\n\n  createEnrollment = async (courseId) => {\n    console.log('Props from APP');\n    console.log('HERE IS THE COURSE ID IN ENROLLMENTS');\n    console.log(courseId);\n    try {\n      const url = process.env.REACT_APP_API_URL  + \"/api/v1/enrollments/\" + courseId + '/' + this.state.loggedInUserId\n      const createdEnrollmentResponse = await fetch(url, {\n        method: 'POST',\n        credentials:'include',\n        body: JSON.stringify(courseId),\n        headers: {\n          'Content-Type':'application/json'\n        }\n      })\n      console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n      const createdEnrollmentJson = await createdEnrollmentResponse.json()\n      console.log(\"here is what we get when we try to enroll in a course\");\n      console.log(createdEnrollmentJson);\n      if (createdEnrollmentResponse.status === 201 ) {\n        this.setState({\n          enrollments:[...this.state.enrollments, createdEnrollmentJson.data]\n        })\n      }\n      console.log('HERE IS THE STATE OF ENROLLMENTS IN APP.JS');\n      console.log(this.state.enrollments)\n    } catch (error) {\n      console.error('error enrolling in course');\n      console.error(error)\n    }\n    \n  }\n\tdeleteEnrollment = async (idOfEnrollmentToDelete) => {\n\t\t\tconsole.log('delete enrollment');\n\t\t\tconst url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + idOfEnrollmentToDelete\n\t\t\ttry {\n\t\t\t\tconst deleteEnrollmentResponse = await fetch(url, {\n\t\t\t\t\tcredentials: \"include\",\n\t\t\t\t\tmethod: \"DELETE\"\n\t\t\t\t})\n\t\t\t\tconsole.log(\"deleteEnrollmentResponse\", deleteEnrollmentResponse);\n\t\t\t\tconst deleteEnrollmentJson = await deleteEnrollmentResponse.json()\n\t\t\t\tconsole.log(\"deleteEnrollmentJson\", deleteEnrollmentJson);\n\t\t\t\tif (deleteEnrollmentResponse.status === 200) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\tcourses: this.props.enrollments.filter(enrollment => enrollment.id !== idOfEnrollmentToDelete)\n\t\t\t\t\t})\n\t\t\t\t}\t\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error deleting enrollment');\n\t\t\t\tconsole.error(error)\n\t\t\t}\n\t\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<EnrollmentList \n\t\t\t\t\tdeleteEnrollment={this.deleteEnrollment}\n\t\t\t\t\tenrollments={this.props.enrollments} />\n\t\t\t\n\t\t\t</React.Fragment>\n\n\t\t)\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}