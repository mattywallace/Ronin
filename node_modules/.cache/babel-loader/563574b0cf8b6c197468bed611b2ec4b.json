{"ast":null,"code":"var _jsxFileName = \"/Users/matthewwallace/cymatics/ronin-react/ronin-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport CourseContainer from './CourseContainer';\nimport LogInRegisterForm from './LogInRegisterForm';\nimport EnrollmentContainer from './EnrollmentContainer';\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.register = async registerInfo => {\n      console.log(\"register() in app. js called with the following info\", registerInfo);\n      const url = process.env.REACT_APP_API_URL + '/api/v1/users/register';\n\n      try {\n        const registerResponse = await fetch(url, {\n          credentials: 'include',\n          method: 'POST',\n          body: JSON.stringify(registerInfo),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('registerResponse', registerResponse);\n        const registerJson = await registerResponse.json();\n        console.log(\"registerJson\", registerJson);\n\n        if (registerResponse.status === 201) {\n          this.setState({\n            loggedIn: true,\n            loggedInUserEmail: registerJson.data.email,\n            loggedInUserId: registerJson.data.id\n          });\n        }\n      } catch (error) {\n        console.error('Error trying to register with API');\n        console.error(error);\n      }\n    };\n\n    this.login = async loginInfo => {\n      const url = process.env.REACT_APP_API_URL + '/api/v1/users/login';\n\n      try {\n        const loginResponse = await fetch(url, {\n          credentials: 'include',\n          method: 'POST',\n          body: JSON.stringify(loginInfo),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('loginResponse', loginResponse);\n        const loginJson = await loginResponse.json();\n        console.log('loginJson', loginJson);\n        console.log(loginJson.data);\n\n        if (loginResponse.status === 200) {\n          this.setState({\n            loggedIn: true,\n            loggedInUserEmail: loginJson.data.email,\n            loggedInUserId: loginJson.data.id\n          });\n        }\n\n        console.log(\"here is what is currently in state\");\n        console.log(this.state);\n      } catch (error) {\n        console.error('Error trying to log in');\n        console.error(error);\n      }\n    };\n\n    this.createEnrollment = async courseId => {\n      console.log('Props from APP');\n      console.log();\n      console.log(this.props.userInfo);\n\n      try {\n        const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + courseId + this.props.userInfo.loggedInUserId;\n        const createdEnrollmentResponse = await fetch(url, {\n          method: 'POST',\n          credentials: 'inculde',\n          body: JSON.stringify(courseId),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n        const createdEnrollmentJson = createdEnrollmentResponse.json();\n        console.log(\"here is what we get when we try to enroll in a course\");\n        console.log(createdEnrollmentJson);\n\n        if (createdEnrollmentResponse.status === 201) {\n          this.setState({\n            enrollments: [...this.state.enrollments, createdEnrollmentJson.data]\n          });\n        }\n      } catch (error) {\n        console.error('error enrolling in course');\n        console.error(error);\n      }\n    };\n\n    this.state = {\n      loggedIn: false,\n      loggedInUserEmail: \"\",\n      loggedInUserId: \"\",\n      enrollments: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 4\n      }\n    }, this.state.loggedIn ? /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CourseContainer, {\n      userInfo: this.state,\n      createEnrollment: this.createEnrollment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(EnrollmentContainer, {\n      userInfo: this.state,\n      createEnrollment: this.createEnrollment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(LogInRegisterForm, {\n      login: this.login,\n      register: this.register,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/matthewwallace/cymatics/ronin-react/ronin-app/src/App.js"],"names":["React","Component","CourseContainer","LogInRegisterForm","EnrollmentContainer","App","constructor","register","registerInfo","console","log","url","process","env","REACT_APP_API_URL","registerResponse","fetch","credentials","method","body","JSON","stringify","headers","registerJson","json","status","setState","loggedIn","loggedInUserEmail","data","email","loggedInUserId","id","error","login","loginInfo","loginResponse","loginJson","state","createEnrollment","courseId","props","userInfo","createdEnrollmentResponse","createdEnrollmentJson","enrollments","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport './App.css';\nimport CourseContainer from './CourseContainer'\nimport LogInRegisterForm from './LogInRegisterForm'\nimport EnrollmentContainer from './EnrollmentContainer'\n\n\nexport default class App extends Component {\n  \n  constructor() {\n    super()\n\n    this.state = {\n      loggedIn: false, \n      loggedInUserEmail: \"\",\n      loggedInUserId: \"\",\n      enrollments:[]\n    }\n  }\n  \n  register = async (registerInfo) => {\n    console.log(\"register() in app. js called with the following info\", registerInfo);\n    const url = process.env.REACT_APP_API_URL + '/api/v1/users/register'\n    try {\n      const registerResponse = await fetch(url, {\n        credentials: 'include',\n        method: 'POST',\n        body: JSON.stringify(registerInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      console.log('registerResponse', registerResponse);\n      const registerJson = await registerResponse.json()\n      console.log(\"registerJson\", registerJson);\n      if(registerResponse.status === 201) {\n        this.setState({\n          loggedIn: true,\n          loggedInUserEmail: registerJson.data.email,\n          loggedInUserId: registerJson.data.id\n        })\n      }\n    } catch (error) {\n      console.error('Error trying to register with API');\n      console.error(error)\n  }\n}\n\n  login = async (loginInfo) => {\n    const url = process.env.REACT_APP_API_URL + '/api/v1/users/login'\n    try {\n      const loginResponse = await fetch(url, {\n        credentials:'include',\n        method: 'POST',\n        body:JSON.stringify(loginInfo),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      console.log('loginResponse', loginResponse);\n      const loginJson = await loginResponse.json()\n      console.log('loginJson', loginJson);\n      console.log(loginJson.data);\n       if(loginResponse.status === 200) {\n        this.setState({\n          loggedIn: true,\n          loggedInUserEmail: loginJson.data.email,\n          loggedInUserId: loginJson.data.id\n        })\n      }\n      console.log(\"here is what is currently in state\");\n      console.log(this.state);\n    } catch(error) {\n      console.error('Error trying to log in')\n      console.error(error)\n    }\n  }\n\n  createEnrollment = async (courseId) => {\n    console.log('Props from APP');\n    console.log();\n    console.log(this.props.userInfo)\n    try {\n      const url = process.env.REACT_APP_API_URL + \"/api/v1/enrollments/\" + courseId + this.props.userInfo.loggedInUserId\n      const createdEnrollmentResponse = await fetch(url, {\n        method: 'POST',\n        credentials:'inculde',\n        body: JSON.stringify(courseId),\n        headers: {\n          'Content-Type':'application/json'\n        }\n      })\n      console.log('createdEnrollmentResponse', createdEnrollmentResponse);\n      const createdEnrollmentJson = createdEnrollmentResponse.json()\n      console.log(\"here is what we get when we try to enroll in a course\");\n      console.log(createdEnrollmentJson);\n      if (createdEnrollmentResponse.status === 201 ) {\n        this.setState({\n          enrollments:[...this.state.enrollments, createdEnrollmentJson.data]\n        })\n      }\n    } catch (error) {\n      console.error('error enrolling in course');\n      console.error(error)\n    }\n    \n  }\n\n  render () {\n  return (\n   <div className=\"App\">\n     {\n      this.state.loggedIn\n      ?\n      <React.Fragment>\n        <CourseContainer \n          userInfo={this.state}\n          createEnrollment={this.createEnrollment}\n          />\n        <EnrollmentContainer \n          userInfo={this.state}\n          createEnrollment={this.createEnrollment}\n          />\n      </React.Fragment>\n      :\n      <LogInRegisterForm \n        login={this.login}\n        register={this.register}\n      />\n    }\n\n  </div>\n  );\n}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}